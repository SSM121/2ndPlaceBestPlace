# Generated by Django 3.1.5 on 2021-04-01 17:52

from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone
import uuid


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='Account',
            fields=[
                ('name', models.CharField(help_text='Name of the user', max_length=40)),
                ('email', models.EmailField(help_text='Email of the user', max_length=254, unique=True)),
                ('userType', models.PositiveSmallIntegerField(default=1)),
                ('password', models.CharField(help_text='The users password', max_length=15)),
                ('last_login', models.DateTimeField(blank=True, null=True)),
                ('is_superuser', models.BooleanField(default=False)),
                ('is_active', models.BooleanField(default=True)),
                ('id', models.UUIDField(default=uuid.UUID('2dd622bf-a225-4872-ac06-9558785ad7bf'), help_text='Unique ID for this particular Account', primary_key=True, serialize=False)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions')),
            ],
            options={
                'ordering': ['email', 'name'],
            },
        ),
        migrations.CreateModel(
            name='Event',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='The long name of the event, with spaces', max_length=50)),
                ('shortName', models.CharField(help_text="Short event name, used when creating attendant 'email' addresses", max_length=15)),
                ('date', models.DateTimeField(default=django.utils.timezone.now, verbose_name='Date')),
                ('address', models.CharField(help_text='Address of the Event', max_length=100)),
            ],
        ),
        migrations.CreateModel(
            name='Owner',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('parkingLots', models.JSONField(help_text='List of this owners parking lots', null=True)),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='ParkingLot',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='The name of the parking lot', max_length=20)),
                ('address', models.CharField(help_text='Address of the parking lot', max_length=100)),
                ('parking', models.IntegerField(help_text='Number of available normal parking spaces')),
                ('tailgate', models.IntegerField(help_text='Number of available tailgate parking spaces')),
                ('date', models.DateField(help_text='Date of the Event')),
                ('price', models.DecimalField(decimal_places=2, default=20.0, help_text='Cost of a normal parking spot', max_digits=5)),
                ('tailgatePrice', models.DecimalField(decimal_places=2, default=30.0, help_text='Cost of a tailgate parking spot', max_digits=5)),
                ('event', models.ManyToManyField(help_text='Event(s) that will use this parking lot', to='parkingGenie.Event')),
                ('owner', models.ForeignKey(help_text='Owner of the parking lot', on_delete=django.db.models.deletion.CASCADE, to='parkingGenie.owner')),
            ],
            options={
                'ordering': ['date', 'price', 'tailgatePrice'],
            },
        ),
        migrations.CreateModel(
            name='Manager',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.AddField(
            model_name='event',
            name='manager',
            field=models.ForeignKey(help_text='Manager who created the Event', on_delete=django.db.models.deletion.CASCADE, to='parkingGenie.manager'),
        ),
        migrations.CreateModel(
            name='Customer',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('carMake', models.CharField(help_text='Make of the customers car', max_length=15)),
                ('carModel', models.CharField(help_text='Model of the customers car', max_length=15)),
                ('carColor', models.CharField(help_text='Color of the customers car', max_length=15)),
                ('carPlate', models.CharField(help_text='Licence plate of the customers car', max_length=15)),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='Attendant',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('owner', models.ForeignKey(help_text='Owner of above parking lot', on_delete=django.db.models.deletion.RESTRICT, to='parkingGenie.owner')),
                ('parkingLot', models.ForeignKey(help_text='Parking Lot to which this attendant is assigned', null=True, on_delete=django.db.models.deletion.RESTRICT, to='parkingGenie.parkinglot')),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
    ]
